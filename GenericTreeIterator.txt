import java.io.*;
import java.util.*;

// No probelm in this code
class Main {
  public static void main(String[] args) throws NumberFormatException, IOException {
   MyGenericTree gt = new MyGenericTree();
   gt.construct(new int[] {10, 20, 50, -1, 60, -1, 30, 70, -1, 80, 110, -1, 120, -1, -1, 90, -1, 40, 100, -1, -1, -1});
  
    for(Integer val: gt){
        if(val == null){
            System.out.print("->");
        }
        else System.out.print(val);
    }
    
    System.out.print(".");
  }
    
    
  static class MyGenericTree implements Iterable<Integer> {
    Node root;
    static class Pair{
            Node node;
            int idx;
            
            Pair(Node node,int idx){
                this.node = node;
                this.idx = idx;
            }
        }
    static class Node {
      int data;
      ArrayList<Node> children = new ArrayList<>();
    }

    public void construct(int[] arr) {
      root = null;

      Stack<Node> st = new Stack<>();
      for (int i = 0; i < arr.length; i++) {
        if (arr[i] == -1) {
          st.pop();
        } else {
          Node t = new Node();
          t.data = arr[i];

          if (st.size() > 0) {
            st.peek().children.add(t);
          } else {
            root = t;
          }

          st.push(t);
        }
    }
  }
    
    public Iterator<Integer> iterator(){
        return new gtIterator(root);
    } 
    
    static class gtIterator implements Iterator<Integer>{
        Node temp;
        Stack<Pair> res = new Stack<>();
        Integer curr = null;
        public gtIterator(Node temp){
            res.push(new Pair(temp,-1));
            next();
        }
        
        public boolean hasNext(){
            if(res.size() == 0){
                return false;
            }
            else{
                return true;
            }
        }
        
        public Integer next(){
            Integer rv = curr;
            curr = null;
            while(res.size() > 0){
                Pair top = res.peek();
                if(top.idx == -1){
                    curr = top.node.data;
                    top.idx++;
                    break;
                }
                else if(top.idx < top.node.children.size()){
                    Pair p =new Pair(top.node.children.get(top.idx),-1);
                    top.idx++;
                    res.push(p);
                    break;
                }
                else{
                    res.pop();
                }
            } 
            
            return rv;
        }
        
        
    }

    
  }

 

}